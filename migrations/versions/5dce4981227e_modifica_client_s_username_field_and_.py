"""modifica client's username field and added more serialize fields from it

Revision ID: 5dce4981227e
Revises: 4ba8e71fb398
Create Date: 2024-04-25 08:23:26.296749

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '5dce4981227e'
down_revision = '4ba8e71fb398'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('client', schema=None) as batch_op:
        # Verificar si la columna 'doc_nro' existe antes de intentar agregarla
        inspector = sa.inspect(op.get_bind())
        columns = inspector.get_columns('client')
        doc_nro_column_exists = any(
            column['name'] == 'doc_nro' for column in columns)
        doc_type_column_exists = any(
            column['name'] == 'doc_type' for column in columns)

        if doc_type_column_exists:
            print("La columna 'doc_type' ya existe en la tabla 'client'.")
        else:
            batch_op.add_column(
                sa.Column('doc_type', sa.String(length=50), nullable=False))

        if doc_nro_column_exists:
            print("La columna 'doc_nro' ya existe en la tabla 'client'.")
        else:
            batch_op.add_column(
                sa.Column('doc_nro', sa.String(length=50), nullable=False))

        batch_op.create_unique_constraint("unique_doc_nro", ['doc_nro'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('client', schema=None) as batch_op:
        batch_op.add_column(
            sa.Column('username', sa.VARCHAR(length=50), nullable=False))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('doc_type')
        batch_op.drop_column('doc_nro')

    # ### end Alembic commands ###
